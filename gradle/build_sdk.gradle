apply from: "$rootDir/gradle/build_base.gradle"
def jniDir = "src/main/jni"
def aarFilename = "wvr_client"

android {
    aaptOptions {
        cruncherEnabled = false
    }
    packagingOptions {exclude 'META-INF/rxjava.properties'}

    defaultConfig {
        externalNativeBuild { ndkBuild {
            def VR_SDK_ROOT = "${buildDir}/${aarFilename}"
            arguments "VR_SDK_ROOT=$VR_SDK_ROOT"
        }}
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "${jniDir}/Android.mk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            externalNativeBuild { ndkBuild {
                arguments "NDK_DEBUG=0"
            }}
        }
        debug {
            externalNativeBuild { ndkBuild {
                arguments "NDK_DEBUG=1"
            }}
        }
    }
}

dependencies {
    compile 'com.htc.vr:wvr_client:+'

    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.squareup:otto:1.3.8'
    implementation('com.dji:dji-sdk:4.14.1', {
        /**
         * Uncomment the "library-anti-distortion" if your app does not need Anti Distortion for Mavic 2 Pro and Mavic 2 Zoom.
         * Uncomment the "fly-safe-database" if you need database for release, or we will download it when DJISDKManager.getInstance().registerApp
         * is called.
         * Both will greatly reducing the size of the APK.
         */
        exclude module: 'library-anti-distortion'
        //exclude module: 'fly-safe-database'
    })

    compileOnly 'com.dji:dji-sdk-provided:4.14.1'

    implementation 'androidx.appcompat:appcompat:1.0.0-alpha1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
//    implementation 'androidx.appcompat:appcompat:1.0.0'


}

// unzip aar
afterEvaluate {
    def unzipDir = file("${buildDir}/${aarFilename}")
    def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
    artifacts.find { it.name == aarFilename }?.with { aar ->
        copy {
            println 'unzip: ' + aar
            from zipTree(aar.file)
            into unzipDir
        }
    }
}
